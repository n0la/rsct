#!/usr/bin/perl -w

use strict;
use warnings;

use v5.14;
use RSCT;
use Env qw(HOME);

use YAML::XS;
use Term::ReadPassword;
use DateTime;
use Data::Dumper;

use Getopt::Long;

my $default_config = $HOME.'/.rsct';

my $url;
my $username;
my $password;
my $config = $default_config;
my $csv = 1;
my $all = 0;
my $output;

my $month;
my $rsct;

my $command = shift;

sub usage {
    say('rsct [command] [options]');
}

sub show_positions {
    my @positions = @{ $rsct->positions };
    my @dates;
    my @undates;

    foreach my $pos (@positions) {
        my $time = $pos->{'time'};
        if ($time =~ m/(\d+)\:(\d+) (AM|PM)/g) {
            my ($hour, $minute, $pm) = ($1, $2, $3);
            $hour += 12 if $pm =~ m/PM/i && ($hour != 0 && $hour != 12);
            $hour  =  0 if $pm =~ m/AM/i && ($hour == 12);

            my $datetime = DateTime->now(time_zone => 'Europe/Vienna')
              ->set(hour => $hour, minute => $minute)
              ;
            my $obj = { datetime => $datetime, type => $pos->{'type'} };
            push(@undates, $obj);
        }
    }

    @dates = sort { $a->{'datetime'}->epoch cmp $b->{'datetime'}->epoch } @undates;

    foreach my $cur (@dates) {
        printf("%02d:%02d: %s\n",
               $cur->{'datetime'}->hour,
               $cur->{'datetime'}->minute,
               $cur->{'type'}
              );
    }
}

sub show_presence {
    my @positions = @{ $rsct->positions };
    my @dates;
    my @undates;
    my $start = undef;
    my $end = undef;
    my $presence = DateTime::Duration->new();
    my $had_go = 0;

    foreach my $pos (@positions) {
        my $time = $pos->{'time'};
        if ($time =~ m/(\d+)\:(\d+) (AM|PM)/g) {
            my ($hour, $minute, $pm) = ($1, $2, $3);
            $hour += 12 if $pm =~ m/PM/i && ($hour != 0 && $hour != 12);
            $hour  =  0 if $pm =~ m/AM/i && ($hour == 12);

            my $datetime = DateTime->now(time_zone => 'Europe/Vienna')
              ->set(hour => $hour, minute => $minute)
              ;
            my $obj = { datetime => $datetime, type => $pos->{'type'} };
            push(@undates, $obj);
        }
    }

    @dates = sort { $a->{'datetime'}->epoch cmp $b->{'datetime'}->epoch } @undates;

    foreach my $cur (@dates) {
        if ($cur->{'type'} eq 'Come') {
            $start = $cur->{'datetime'};
        } elsif ($cur->{'type'} eq 'Go' and defined $start) {
            $end = $cur->{'datetime'};
            my $duration = $end->subtract_datetime($start);
            $presence->add_duration($duration);

            $end = undef;
            $start = undef;

            $had_go = 1;
        }
    }

    # If we have something left over, that means we haven't clocked out
    # just yet for the day. This is a common case. Just take 'now' and
    # add the duration to it to our presence.
    if ($start) {
        my $now = DateTime->now(time_zone => 'Europe/Vienna');
        my $duration = $now->delta_ms($start);
        $presence->add_duration($duration);
    }

    # This means there was no "go" somewhere in our history. This is common
    # if we had no break. This case, after 6 hours and 30 minutes, we subtract
    # a break of 30 minutes ourselves
    unless ($had_go) {
        my ($hours, $minutes) = $presence->in_units('hours', 'minutes');
        if ($hours > 6 or ($hours == 6 and $minutes > 30)) {
            # Subtract break of 30 minutes
            my $break = DateTime::Duration->new(minutes => 30);
            $presence->subtract_duration($break);
        }
    }

    my ($hours, $minutes) = $presence->in_units('hours', 'minutes');
    printf("Presence: %02d:%02d\n", $hours, $minutes);
}

sub overview {
    $month = $rsct->monthly_view();

    say('Flexitime: '.$rsct->flexitime);
    say('Leave: '.$rsct->leave);

    show_positions();
    show_presence();

    say('Overview '.$month->{'month'}.'.'.$month->{'year'}.':');
    foreach my $day (@{$month->{'days'}}) {
        if ($day->{'come_sta'} ne '') {
            say("$day->{'date'}: $day->{'come_sta'} - $day->{'go_sta'} ".
                "Break: $day->{'break'} FT: $day->{'ftday'}"
               );
        } elsif ($day->{'absence'} ne '') {
            say("$day->{'date'}: $day->{'absence'}");
        }
    }
}

sub csv_export_month {
    my $FH = shift;
    my $header = shift // 1;

    my @keys = ('date',
                'come_sta', 'come_rou', 'come_ass',
                'go_sta', 'go_rou', 'go_ass',
                'absence', 'profile', 'break',
                'target', 'fb', 'present',
                'ftday', 'ftmonth', 'fttotal'
               );
    my @days = @{$month->{'days'}};

    say($FH join(",", @keys)) if $header;

    foreach my $day (@days) {
        my @data = map { $day->{$_} } @keys;
        say($FH join(",", @data));
    }
}

sub csv_export_current {
    my $file = shift;

    open(my $CSV, "> $file")
      or die("Could not open CSV file: $csv");

    csv_export_month($CSV);
    close($CSV);
}

sub csv_export_all {
    my $path = shift;
    my $done = 0;
    my $header = 1;

    do {
        if (-d $path) {
            my $file = $path.'/'. $month->{'month'}.$month->{'year'}.'.csv';
            csv_export_current($file);
        } else {
            open(my $CSV, ">> $path")
              or die('Could not open CSV file: '.$path);

            csv_export_month($CSV, $header);
            $header = 0;

            close($CSV);
        }

        eval {
            $month = $rsct->prev_month();
        };

        $done = 1 if $@;
    } while (not $done);
}

sub csv_export {
    $month = $rsct->monthly_view();

    if (not $all) {
        csv_export_current($output // '-');
    } else {
        csv_export_all($output // '-');
    }
}

sub perror {
    say(STDERR shift);
    exit(3);
}

sub check_password {
    unless ($password) {
        while (1) {
            my $p = read_password('Specify password: ', 0, 1);
            exit(3) unless $p;
            if ($p) {
                $password = $p;
                last;
            }
        }
    }

    if ($password eq '-') {
        $password = <>;
        chomp($password);
    }
}

sub sanity_checks {
    perror('No URL specified.') unless defined $url;
    perror('No username specified.') unless defined $username;
    perror('No password specified.') unless defined $password;
}

sub load_config {
    my $file = $config;

    return if not -e $file and $file eq $default_config;

    my $cfg = YAML::XS::LoadFile($file);

    $url = $cfg->{'url'} unless $url;
    $username = $cfg->{'username'} unless $username;
    $password = $cfg->{'password'} unless $password;
}

sub cmd_export {
    if ($csv) {
        csv_export();
    }
    return 0;
}

sub cmd_overview {
    overview();
    return 0;
}

sub cmd_presence {
    show_presence();
    return 0;
}

sub cmd_go {
    $rsct->go();
    return 0;
}

sub cmd_come {
    $rsct->come();
    return 0;
}

sub cmd_status {
    if ($rsct->is_stamped_in()) {
        say('Status: stamped in');
    } else {
        say('Status: stamped out');
    }
}

sub cmd_help {
    system('perldoc rsct');
}

GetOptions('u|username=s' => \$username,
           'p|password=s' => \$password,
           'f|file=s' => \$config,
           'url=s' => \$url,
           'c|csv' => \$csv,
           'o|output=s' => \$output,
           'a|all' => \$all,
          ) or exit(1);
load_config();

my %commands = (
                'export' => \&cmd_export,
                'overview' => \&cmd_overview,
                '' => \&cmd_overview,
                'go' => \&cmd_go,
                'come' => \&cmd_come,
                'status' => \&cmd_status,
                'presence' => \&cmd_presence,
               );

$command = '' unless defined $command;

if ($command eq '') {
    usage();
    exit(1);
}

if ($command eq 'help') {
    exit(cmd_help());
}

unless ($commands{$command}) {
    usage();
    exit(1);
}

check_password();
sanity_checks();

$rsct = RSCT->new($url);
# Login and fetch month.
$rsct->login($username, $password);

my $ret = 3;

eval {
    $ret = $commands{$command}();
};

warn $@ if $@;

$rsct->logout();

exit($ret);

=head1 NAME

rsct -- export and show current times stamped with ReinerSCT.

=head1 SYNOPSIS

rsct [command] [options]

=head1 DESCRIPTION

rsct uses the RSCT perl module to fetch and parse information from the
ReinerSCT PCTerminal web application. It can show the data in human
readable form (for viewing) but also export it to CSV, so that other
applications can process the data.

=head1 COMMANDS

=over 4

=item B<help>

This bogus.

=item B<overview>

Print a human readable overview of the current day and the current
month.

=item B<export>

Export the data to a file (standard stdout).

=item B<go>

Stamp out.

=item B<come>

Stamp in.

=item B<status>

Show whether you are currently stamped out or in.

=back

=head1 OPTIONS

=over 4

=item b<-a>, b<--all>

Tells b<export> to export all months starting with the current one and
moving backwards until now more data can be found on the web application.

=item b<-c>, b<--csv>

When runing b<export> export in CSV format.

=item B<-f> I<file>, B<--file> I<file>

Specify a different location for the configuration file, than $HOME/.rsct.

=item B<-o> I<file-or-dir>, B<--output> I<file-or-dir>

Sets an alternate output file or directory name for B<export>. If I<--all>
is also specified then this can be a directory. In this case separate files
for each month are created instead of having one big dump of data.

=item B<-p> I<password>, B<--password> I<password>

The password to login with. If you do not specify a password then one is
prompted for on the terminal. Pass "-" as a password to have rsct read it
from stdin. You can also specify the password in the configuration file.

=item B<--url> I<url>

The URL of the ReinerSCT PCTerminal. This must be the full URL with the
location (usually /reiner-sct/pcterminal).

=item B<-u> I<username>, B<--username> I<username>

Specify the username to login with.

=back

=head1 CONFIG FILE

The configuration lies in $HOME/.rsct. It is in YAML format and allows
to specify B<url>, B<username> and B<password>. An alternate file can
be given by using the I<-f> or I<--file> option:

  url: "http://example.com/reiner-sct/pcterminal"
  username: foo
  password: bar

Values given on the command line override configuration file parameters.

=head1 AUTHOR

rsct and the corresponding RSCT Perl module where written by:
Florian Stinglmayr <florian@n0la.org>

=head1 COPYRIGHT

  Copyright 2015 Florian Stinglmayr
